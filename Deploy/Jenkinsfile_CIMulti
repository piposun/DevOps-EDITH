pipeline {
    agent any
    tools {
        maven 'Maven 3.3.9'
        jdk 'jdk8'
    }

    stages {
    
    	stage ('Read YAML file') {
            steps {
            	sh 'rm -rf DevOps-deployment'
            	sshagent (credentials: ['github-ssh']) {
            	sh 'git clone git@github.com:piposun/DevOps-deployment.git'
            	dir("DevOps-deployment") {
	                script {
	                    def filename = 'edith-deployment.yaml'
	                    def data = readYaml file: filename
	                    def seperator = '.'
	                    def version = data.version_build[0].toString()
	                   
	                    def firstVersion = version.substring(0, version.indexOf(seperator))
	                    def tmp = version.substring(version.indexOf(seperator)+1, version.length())
	                    def prodVersion = tmp.substring(0, tmp.indexOf(seperator))
	                    def devVersion = tmp.substring(tmp.indexOf(seperator)+1, tmp.length())
			    
			    		env.FIRST_VERSION = firstVersion
	                    env.PROD_VERSION = prodVersion
			    		env.DEV_VERSION = devVersion	    		
	                }
                }
            }
            }
        }
	
    	stage ('Init environment Master branch'){
    		when{
    		    branch 'master'
    		}
			steps{
			    sh'echo "Master branch environment initialization..."'
			    script{
			    	env.BRANCH = "master"
			        def version = "$env.PROD_VERSION"
                    version = version.toInteger()
					version++
				
			      	env.PROD_VERSION = version
			      	env.DEV_VERSION = "0"
			    	env.VERSION = "${FIRST_VERSION}" + "." + "${PROD_VERSION}" + "." + "${DEV_VERSION}"
			    }
			}
    	}
    	
    	stage ('Init environment Development branch'){
    		when{
    		    branch 'development'
    		}
    		steps{
    		    sh'echo "Development branch environment initialization..."'
    		    script{
    		        env.BRANCH = "development"
					//env.VERSION = "1.0.$BUILD_NUMBER"  
			
					def version = "$env.DEV_VERSION"
                    version = version.toInteger()
					version++
				
					env.DEV_VERSION = version
					env.VERSION = "${FIRST_VERSION}" + "." + "${PROD_VERSION}" + "." + "${DEV_VERSION}"
    		    }
    		}
    	}

        stage ('Initialize') {
            steps {
                sh '''
                    echo "PATH = ${PATH}"
                    echo "M2_HOME = ${M2_HOME}"
                '''
            }
        }
        
        stage ('Build') {
            steps {
                sh 'mvn clean package'
            }
        }
        
        stage ('SonarQube') {
            steps {
                sh 'mvn verify sonar:sonar'
            }
        }
        
        stage ('Docker build'){
        	steps{
        	   sh "docker build . -t eu.gcr.io/edith-259213/edith:${env.VERSION}"
        	}
        }
        
        stage ('Push the image on GCR'){
        	steps{
        	   sh 'gcloud auth configure-docker --quiet'
        	   sh "docker push eu.gcr.io/edith-259213/edith:${env.VERSION}"

        	}
        }
        
        stage ('Update image version'){
           steps{
	   	script {
	   	 	def filename = 'DevOps-deployment/edith-deployment.yaml'
	   	 	sh "sed -i \'s/version_build: [0-9]*.[0-9]*.[0-9]*/version_build: ${env.VERSION}/\' $filename"
		 	sh "sed -i s/edith:[0-9]*.[0-9]*.[0-9]*/edith:${env.VERSION}/ $filename"
		 }
           }
        }
        
        stage ('Commit/Push edit-deployment.yaml'){
           steps{
           dir("DevOps-deployment") {
           sh'ls'
           sshagent (credentials: ['github-ssh']) {
           
           		    sh'git config --global user.name "Manus06"'
                    sh'git config --global user.email "jenkins@isen.fr"'
           
					sh'git add edith-deployment.yaml'
					sh'git commit -m "Update image version (from jenkins_CI)"'
					sh"git push origin HEAD:master"
				}
			  }
           }
        }
  
        stage ('Finished'){
           steps{
				sh 'echo "Pipeline finished"'
           }
        }
    }
}
